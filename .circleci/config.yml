---
version: 2.1

parameters:
  python-version:
    type: string
    default: "3.11.9"
  python-module:
    type: string
    default: "udata_hydra"
  publish-branch:
    type: string
    default: "main"
  cache-prefix:
    type: string
    default: "py-cache-v2"

jobs:

  install:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
            - << pipeline.parameters.cache-prefix >>-{{ arch }}-{{ checksum "requirements-dev.txt" }}
            - << pipeline.parameters.cache-prefix >>-{{ arch }}-{{ .Branch }}
            - << pipeline.parameters.cache-prefix >>-{{ arch }}-{{ .Environment.BASE_BRANCH }}
      - run:
          name: Install Python dependencies
          command: |
            python3 -m pip install --upgrade pip
            python3 -m venv .venv
            source .venv/bin/activate
            pip install '.[dev]'
      - save_cache:
          key: << pipeline.parameters.cache-prefix >>-{{ arch }}-{{ checksum "requirements-dev.txt" }}
          paths:
            - .venv
      - persist_to_workspace:
          root: .
          paths:
            - .

  lint:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Check code linting, code formatting and imports sorting
          command: |
            source .venv/bin/activate
            # Check linting and imports sorting
            ruff check
            # Check code formatting
            ruff format --check

  tests:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
      - image: cimg/postgres:11.15
        environment:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run tests
          environment:
            DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
            UDATA_INSTANCE_NAME: udata
          command: |
            source .venv/bin/activate
            pytest --junitxml=reports/python/tests.xml -p no:sugar --color=yes
      - store_test_results:
          path: reports/python

  build:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build a distributable package
          command: |
            source .venv/bin/activate
            pip install build
            # Build a wheel release
            if [[ $CIRCLE_TAG ]]; then
                # This is a tagged release, version has been handled upstream
                python3 -m build
            else
                # Relies on a dev version like "2.0.0.dev" by default
                VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
                DEV_VERSION="${VERSION}.dev${CIRCLE_BUILD_NUM}"
                echo "Building a dev version: ${DEV_VERSION}"
                # Use sed to replace the version in pyproject.toml
                sed -i "s/version = \"${VERSION}\"/version = \"${DEV_VERSION}\"/" pyproject.toml
                python3 -m build
            fi
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - .

  publish:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish on PyPI
          command: |
            source .venv/bin/activate
            pip install twine
            twine upload dist/* -u "${PYPI_USERNAME}" -p "${PYPI_PASSWORD}" --non-interactive

workflows:
  build:
    jobs:
      - install:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - lint:
          requires:
            - install
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - tests:
          requires:
            - install
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - build:
          requires:
            - tests
            - lint
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - publish:
          requires:
            - build
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
                - /[0-9]+(\.[0-9]+)+/
                - /rc[0-9]+/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
          context: org-global
