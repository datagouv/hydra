---
version: 2.1

parameters:
  python-version:
    type: string
    default: "3.11.2"
  publish-branch:
    type: string
    default: "main"
    description: "Branch to publish to PyPI and trigger the Gitlab CI/CD pipeline when pushed to"
  deploy-env:
    type: string
    default: "dev"
    description: "Environment to deploy to"
  cache-prefix:
    type: string
    default: "py-cache-v2"
    description: "Prefix used for cache keys to store and restore Python dependencies. Increment this value to invalidate existing caches."

jobs:
  install:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
            - << pipeline.parameters.cache-prefix >>-{{ arch }}-{{ checksum "poetry.lock" }}
            - << pipeline.parameters.cache-prefix >>-{{ arch }}-{{ .Branch }}
            - << pipeline.parameters.cache-prefix >>-{{ arch }}-{{ .Environment.BASE_BRANCH }}
            - << pipeline.parameters.cache-prefix >>-{{ arch }}-
      - run:
          name: Install Poetry 2.0.1 locally
          command: |
            python3 -m venv .poetry-venv
            .poetry-venv/bin/pip install poetry==2.0.1
            ln -s .poetry-venv/bin/poetry poetry-binary
      - run:
          name: Install python dependencies
          command: |
            ./poetry-binary config virtualenvs.in-project true
            ./poetry-binary install --extras "dev"
      - save_cache:
          key: << pipeline.parameters.cache-prefix >>-{{ arch }}-{{ checksum "poetry.lock" }}
          paths:
            - .venv
            - .poetry-venv
      - persist_to_workspace:
          root: .
          paths:
            - .

  lint:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Lint and format code and sort imports
          # ruff check --select I . : check linting and imports sorting without fixing (to fix, use --fix)
          # ruff format --check . : check code formatting without fixing (to fix, remove --check)
          command: |
            ./poetry-binary run ruff --version
            ./poetry-binary run ruff check --select I . -v
            ./poetry-binary run ruff format --check . -v

  tests:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
      - image: cimg/postgres:15.13
        environment:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    parallelism: 4 # Number of executed tests in parallel
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run tests
          environment:
            DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
            UDATA_INSTANCE_NAME: udata
          command: |
            # Find and split tests
            TESTFILES=$(find tests -name "test_*.py" | circleci tests split --split-by=timings)
            # Debug: Show what's in TESTFILES
            echo "Test files assigned to the executor ${CIRCLE_NODE_INDEX}/${CIRCLE_NODE_TOTAL}:"
            echo "$TESTFILES"
            # Run the found tests
            if [ -n "$TESTFILES" ]; then
              ./poetry-binary run pytest --junitxml=reports/python/tests.xml -p no:sugar --color=yes $TESTFILES
            else
              echo "No tests to run in this split"
              exit 1
            fi
      - store_test_results:
          path: reports/python

  build:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Set the version
          command: |
            if [[ $CIRCLE_TAG ]]; then
                # This is a tagged release, version has been handled upstream
                echo "export RELEASE_VERSION=$CIRCLE_TAG" > version.sh
            # Otherwise, relies on a dev version like "1.2.1.dev" by default
            elif [[ $CIRCLE_BRANCH == << pipeline.parameters.publish-branch >> ]]; then
                # for main branches, can't add the commit hash since it's not a valid format for publishing
                echo "export RELEASE_VERSION=$(./poetry-binary version -s)$CIRCLE_BUILD_NUM" > version.sh
            else
                # for feature branches, add the commit hash
                echo "export RELEASE_VERSION=$(./poetry-binary version -s)$CIRCLE_BUILD_NUM+${CIRCLE_SHA1:0:7}" > version.sh
            fi
            chmod +x version.sh
      - run:
          name: Display build info for debugging
          command: |
            source version.sh
            echo "Building a wheel release with version $RELEASE_VERSION"
            echo "Build number: $CIRCLE_BUILD_NUM"
            echo "Commit hash: ${CIRCLE_SHA1:0:7}"
            echo "Git tag: $CIRCLE_TAG"
      - run:
          name: Build a distributable package as a wheel release with Poetry
          command: |
            source version.sh
            # Set the version in pyproject.toml
            ./poetry-binary version $RELEASE_VERSION
            ./poetry-binary build
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - .
            - version.sh

  publish:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish on PyPI
          command: |
            ./poetry-binary publish --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" --no-interaction

  trigger-gitlab-pipeline:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Configure the SSH simple-scaffold repository private key
          command: |
            mkdir -p ~/.ssh
            # SCAFFOLD_PRIVATE_KEY is the private key related to the "simple-scaffold" GitLab repository, so that it can be cloned
            # CircleCI doesn't accept multiple lines in a single environment variable, so the multiline private key must be base64 encoded, and then decoded here
            echo "$SCAFFOLD_PRIVATE_KEY" | base64 -d > ~/.ssh/id_ed25519
            chmod 600 ~/.ssh/id_ed25519
            ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts
      - run:
          name: Configure Git
          command: |
            git config --global user.email "root@data.gouv.fr"
            git config --global user.name "datagouv"
      - run:
          name: Clone simple-scaffold repository
          command: |
            git clone --quiet --depth 1 $SCAFFOLD_REPO_SSH_URL scaffold
      - run:
          name: Trigger Gitlab CI/CD pipeline for Hydra to deploy to dev environment
          command: |
            source version.sh
            cd scaffold
            # Run the script that triggers the Gitlab CI/CD pipeline.
            # Must have GITLAB_API_TOKEN set in the environment
            # GITLAB_API_TOKEN is the token related to the "infra" GitLab repository, so that the Gitlab CI/CD pipeline can be triggered
            # The script args are, in order:
            # - hydra: the name of the project to deploy (APP_NAME)
            # - $RELEASE_VERSION: the version to deploy (RELEASE_VERSION)
            # - << pipeline.parameters.deploy-env >>: the environment to deploy to (ENV)
            # - "": the deploy variables (VARS)
            ./scripts/gitlab-ci-pipeline.sh hydra $RELEASE_VERSION << pipeline.parameters.deploy-env >> ""

  create-sentry-release:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Create Sentry release
          command: |
            source version.sh
            # Create release
            curl https://errors.data.gouv.fr/api/0/organizations/sentry/releases/ \
              -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
              -H 'Content-Type: application/json' \
              -d "{\"version\":\"${RELEASE_VERSION}\",\"ref\":\"${CIRCLE_SHA1}\",\"projects\":[\"hydra\"]}"

            # Create deployment
            curl https://errors.data.gouv.fr/api/0/organizations/sentry/releases/${RELEASE_VERSION}/deploys/ \
              -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
              -H 'Content-Type: application/json' \
              -d "{\"environment\":\"<< pipeline.parameters.deploy-env >>\"}"

workflows:
  build-test-deploy:
    jobs:
      - install:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - lint:
          requires:
            - install
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - tests:
          requires:
            - install
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - build:
          requires:
            - tests
            - lint
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - publish:
          requires:
            - build
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
                - /[0-9]+(\.[0-9]+)+/
                - /rc[0-9]+/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
          context: org-global
      - trigger-gitlab-pipeline:
          requires:
            - publish
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
          context:
            - org-global
            - gitlab-trigger
      - create-sentry-release:
          requires:
            - trigger-gitlab-pipeline
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
          context:
            - org-global
